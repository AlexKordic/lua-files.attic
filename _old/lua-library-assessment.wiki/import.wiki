#sidebar GlueSidebar
==`import([env,]modules|t) -> env`==
==`import(env,modules|t) -> env`==

*Load and import (parts of) modules into the current module's private environment (or public environment, or `_G` or other table)*.

`modules` is a comma-separated list of `modspec`s:
  * a `modspec` can have many forms:
    * `dir.subdir.module.var` imports `var` from `module` as `env.dir.subdir.module.var`
    * `dir/subdir/module/var` imports `var` from `module` as `env.var`
    * `dir/subdir/module/var/*` imports all keys of `var` from `module` into `env`
    * `dir/subdir/module/*` imports all vars of `module` into `env`
    * `dir/*` imports all vars of all modules of all subdirectories of dir into `env.<subdir>.<module>.<var>`
    * `dir/subdir/module.var` imports `var` from `module` as `env.module.var`

*Importing a module is a 3 step process:*
  * load the module if not already loaded
    * prepare a custom environment for running the module chunk
    * run the chunk in the custom environment
      * the environment is the module's private table, also accessible from inside the module as `_P`
      * writing new keys into `_P` writes them also into the module's export table, also accessible from inside the module as `_M`
      * so any globals that the module declare go into
  * import selected variables from the module table

A module is only loaded once, and its table is placed in `package.loaded` just like `require` does.

Circular dependencies are not detected, in case you're wondering.